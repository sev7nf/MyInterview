详见：
  http://developer.51cto.com/art/201509/490965.htm
  http://z-jiankun.iteye.com/blog/1408471
  Lock锁详解：http://www.cnblogs.com/dolphin0520/p/3923167.html
注意：
    ★1、线程执行同步方法时，具有排他性。
        当任意一个线程进入到一个对象的任意一个同步方法时，这个对象的所有同步方法都被锁定了，在此期间，其他任何线程
都不能访问这个对象的任意一个同步方法，直到这个线程执行完它所调用的同步方法并从中退出，从而导致它释放了该对象的同步
锁之后。在一个对象被某个线程锁定之后，其他线程是可以访问这个对象的所有非同步方法的。
        （如果一个对象既有同步方法，又有同步块，那么当其中任意一个同步方法或者同步块被某个线程执行时，这个对象就被
锁定了，其他线程无法在此时访问这个对象的同步方法，也不能执行同步块。）

      注意：静态同步方法（static synchronized）只受它所属类的其它静态同步方法的制约，而跟这个类的实例（对象）没有关系。

      2、同步块是通过锁定一个指定的对象，来对同步块中包含的代码进行同步。
      3、同步方法是对这个方法块里的代码进行同步，而这种情况下锁定的对象就是同步方法所属的主体对象自身。
     
Lock锁需要注意： 
1）Lock不是Java语言内置的，synchronized是Java语言的关键字，因此是内置特性。Lock是一个类，通过这个类可以实现同步访问；

2）Lock和synchronized有一点非常大的不同，采用synchronized不需要用户去手动释放锁，当synchronized方法或者synchronized
代码块执行完之后，系统会自动让线程释放对锁的占用；而Lock则必须要用户去手动释放锁，如果没有主动释放锁，就有可能导致出现死锁现象。
